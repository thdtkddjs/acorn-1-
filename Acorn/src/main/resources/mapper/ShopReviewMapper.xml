<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="shopReview">

   <select id="getReviewCount" parameterType="shopReviewDto" resultType="int">
      SELECT NVL(MAX(ROWNUM), 0)
      FROM board_shop_review
      <choose>
         <when test="content != null">
            WHERE content LIKE '%'||#{content}||'%' AND deleted = 'no'
         </when>
      </choose>
   </select>
   
   <select id="getReviewList" parameterType="shopReviewDto" resultType="shopReviewDto">
      SELECT *
      FROM
         (SELECT result1.*, ROWNUM as rnum
         FROM
            (SELECT *
            FROM 
            	(SELECT result.*, profile
           		FROM 
           			(SELECT r.num, r.writer, r.ref_group, r.content, r.deleted, r.imagePath, r.grade, TO_CHAR(r.regdate, 'YY.MM.DD HH24:MI') AS regdate, s.title
						FROM board_shop_review r, (SELECT num, title FROM board_shop) s
						WHERE r.ref_group = s.num) result
				INNER JOIN users
				ON result.writer = users.id)
            <choose>
               <when test="content != null">
                  WHERE content LIKE '%'||#{content}||'%' AND deleted = 'no'
               </when>
            </choose>
            ORDER BY num DESC) result1)
      WHERE rnum BETWEEN #{startRowNum} AND #{endRowNum}  
   </select>
   
   
   <select id="getList" parameterType="shopReviewDto" resultType="shopReviewDto">
		SELECT *
		FROM
			(SELECT result1.*, ROWNUM AS rnum
			FROM
				(SELECT num, writer, title, content, ref_group, 
				review_group, deleted, imagePath, grade,
				TO_CHAR(board_shop_review.regdate, 'YY.MM.DD HH24:MI') AS regdate, profile
				FROM board_shop_review
				
				<choose>
	               <when test="title != null">
	                  WHERE title LIKE '%'||#{title}||'%'
	               </when>
	            </choose>
				
				INNER JOIN users
				ON board_shop_review.writer = users.id
				WHERE ref_group = #{ref_group}
				ORDER BY review_group DESC, num DESC) result1)
		WHERE rnum BETWEEN #{startRowNum} AND #{endRowNum}   
	</select>
	
	<!-- 리뷰는 실제로 삭제하지 않고 delete 칼럼에 저장된 값을 yes로 수정하는 작업만 한다. -->
	<update id="delete" parameterType="int">
		UPDATE board_shop_review
		SET deleted = 'yes'
		WHERE num = #{num}
	</update>
	
	<!-- 리뷰 저장할 때 가게글의 글번호도 미리 ShopReviewDto 객체에 담아와야 한다. -->
	<insert id="insert" parameterType="shopReviewDto">
		INSERT INTO board_shop_review
		(num, writer, content, title, ref_group, review_group, regdate, imagePath, grade)
		VALUES(#{num}, #{writer}, #{content}, #{title}, #{ref_group}, #{review_group}, SYSDATE, #{imagePath}, #{grade})
	</insert>
	
	<!-- 저장 예정인 리뷰의 글번호를 미리 얻어내기 -->
	<select id="getSequence" resultType="int">
		SELECT board_shop_review_seq.NEXTVAL
		FROM DUAL
	</select>
	
	<update id="update" parameterType="shopReviewDto">
		UPDATE board_shop_review
		SET content = #{content}
		WHERE num = #{num}
	</update>
	
	<select id="getData" parameterType="int" resultType="shopReviewDto">
		SELECT num, writer, title, content, ref_group, review_group, deleted, TO_CHAR(regdate, 'YY.MM.DD HH24:MI') AS regdate, imagePath
		FROM board_shop_review
		WHERE num = #{num}
	</select>
	
	<select id="getCount" parameterType="int" resultType="int">
		SELECT NVL(MAX(ROWNUM), 0)
		FROM board_shop_review
		WHERE ref_group = #{ref_group} and deleted='no'
	</select>
	<!-- Grade 계산용 deleted는 제외 -->
	<select id="getGrade" parameterType="int" resultType="double">
		SELECT avg(grade)
		FROM board_shop_review
		WHERE ref_group = #{ref_group} and deleted='no'
	</select>
	
	<!-- 차트 테스트용 쿼리 -->
	<select id="test" parameterType="int" resultType="shopReviewDto">
		select count(num) gCount, grade
		from (select num, ref_group, grade from board_shop_review
				where ref_group =#{num} and deleted = 'no')
		group by grade
		order by grade ASC
	</select>
</mapper>